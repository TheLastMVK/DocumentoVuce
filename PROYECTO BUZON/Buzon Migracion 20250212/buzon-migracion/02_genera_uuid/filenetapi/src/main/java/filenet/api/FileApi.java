/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package filenet.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import filenet.model.Documento;
import filenet.model.ErrorResponse;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-04-14T15:26:38.049122471Z[GMT]")
@Validated
public interface FileApi {

    @Operation(summary = "Elimina un archivo del FileNet", description = "", tags={ "Gestion de archivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operacion exitosa"),
        
        @ApiResponse(responseCode = "500", description = "Servicio con problemas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> fileDelete(@Parameter(in = ParameterIn.HEADER, description = "Usuario de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetUser", required=true) String filenetUser, @Parameter(in = ParameterIn.HEADER, description = "Password de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetPassword", required=true) String filenetPassword, @Parameter(in = ParameterIn.HEADER, description = "Ambiente de despliegue" ,required=true,schema=@Schema()) @RequestHeader(value="host", required=true) String host, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Id del documento" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "iddocumento", required = true) String iddocumento);


    @Operation(summary = "Obtiene un archivo del FileNet", description = "", tags={ "Gestion de archivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))),
        
        @ApiResponse(responseCode = "500", description = "Servicio con problemas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> fileGet(@Parameter(in = ParameterIn.HEADER, description = "Usuario de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetUser", required=true) String filenetUser, @Parameter(in = ParameterIn.HEADER, description = "Password de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetPassword", required=true) String filenetPassword, @Parameter(in = ParameterIn.HEADER, description = "Ambiente de despliegue" ,required=true,schema=@Schema()) @RequestHeader(value="host", required=true) String host, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Id del documento" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "iddocumento", required = true) String iddocumento);


    @Operation(summary = "Crea un archivo en el FileNet", description = "", tags={ "Gestion de archivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))),
        @ApiResponse(responseCode = "400", description = "Error bad request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))),
        @ApiResponse(responseCode = "500", description = "Servicio con problemas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> filePost(@Parameter(in = ParameterIn.HEADER, description = "Usuario de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetUser", required=true) String filenetUser, @Parameter(in = ParameterIn.HEADER, description = "Password de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetPassword", required=true) String filenetPassword, @Parameter(in = ParameterIn.HEADER, description = "Ambiente de despliegue" ,required=true,schema=@Schema()) @RequestHeader(value="host", required=true) String host, @Parameter(in = ParameterIn.DEFAULT, description = "Datos de archivo", required=true, schema=@Schema()) @Valid @RequestBody Documento body);


    @Operation(summary = "Modifica un archivo en el FileNet", description = "", tags={ "Gestion de archivos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))),
        
        @ApiResponse(responseCode = "500", description = "Servicio con problemas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<?> filePut(@Parameter(in = ParameterIn.HEADER, description = "Usuario de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetUser", required=true) String filenetUser, @Parameter(in = ParameterIn.HEADER, description = "Password de FileNet" ,required=true,schema=@Schema()) @RequestHeader(value="filenetPassword", required=true) String filenetPassword, @Parameter(in = ParameterIn.HEADER, description = "Ambiente de despliegue" ,required=true,schema=@Schema()) @RequestHeader(value="host", required=true) String host, @Parameter(in = ParameterIn.DEFAULT, description = "Datos de archivo", required=true, schema=@Schema()) @Valid @RequestBody Documento body);

}

