<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Montar grupo de Hilos">
        <intProp name="ThreadGroup.num_threads">400</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ComparisonVisualizer" testclass="ResultCollector" testname="Visualizador de la aserción de comparación">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Petición HTTP">
          <stringProp name="HTTPSampler.domain">landing-test.vuce.gob.pe</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">vuce-zee-api-lote/v1/lotes</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${requestBody}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// Función para generar un nombre aleatorio válido
def generateRandomName(int length) {
    def dateFormat = DateTimeFormatter.ofPattern(&quot;yyyyMMddHHmmss&quot;)
    def currentDate = LocalDateTime.now().format(dateFormat)
      //Cambiar la V por otra letra o numero, para evitar caer en nombres similares
    return &quot;LOTE STRESS &quot; + currentDate
}

// JSON original
def originalJson = &apos;&apos;&apos;{
    &quot;id&quot;:null,
    &quot;etapa&quot;:{&quot;id&quot;:&quot;b06e5fad-3d87-45e5-bed5-57cdcd296954&quot;,&quot;nombre&quot;:&quot;ETAPA MLC&quot;,&quot;referencia&quot;:&quot;CERCA MERCADO&quot;,&quot;area&quot;:15000,&quot;organizacionId&quot;:1,&quot;clienteId&quot;:1,&quot;activo&quot;:0,&quot;estado&quot;:0,&quot;timestampCreate&quot;:&quot;2024-07-31 14:59:51&quot;,&quot;timestampUpdate&quot;:&quot;2024-07-31 14:59:51&quot;,&quot;uidCreate&quot;:1,&quot;uidUpdate&quot;:1},
    &quot;manzana&quot;:{&quot;id&quot;:&quot;07a6913e-487e-45ce-88df-1b73c6d89ac4&quot;,&quot;nombre&quot;:&quot;MANZANA&quot;,&quot;referencia&quot;:&quot;35000&quot;,&quot;area&quot;:15000,&quot;organizacionId&quot;:1,&quot;clienteId&quot;:1,&quot;activo&quot;:0,&quot;estado&quot;:0,&quot;timestampCreate&quot;:&quot;2024-07-03 08:11:22&quot;,&quot;timestampUpdate&quot;:&quot;2024-07-03 08:11:22&quot;,&quot;uidCreate&quot;:1,&quot;uidUpdate&quot;:1},
    &quot;nombre&quot;:&quot;LOTE CAST&quot;,
    &quot;referencia&quot;:&quot;PLAYA&quot;,
    &quot;area&quot;:&quot;100&quot;,
    &quot;tipoMoneda&quot;:{&quot;id&quot;:&quot;52363780-6174-e0c2-8bf6-c88aae514579&quot;},
    &quot;precio&quot;:&quot;10.00&quot;,
    &quot;estado&quot;:1,
    &quot;bloque&quot;:&quot;&quot;,
    &quot;zeet&quot;:&quot;e94eb4dc-3528-4bf9-b383-aed611ae0a00&quot;,
    &quot;bloques&quot;:[{&quot;bloque&quot;:{&quot;id&quot;:&quot;9e768ad6-1ed6-42c6-b9dd-66d1cecf4dc8&quot;,&quot;nombre&quot;:&quot;BLOQUE A&quot;,&quot;referencia&quot;:&quot;CENTRO DE LA CIUDAD&quot;,&quot;area&quot;:24,&quot;organizacionId&quot;:1,&quot;clienteId&quot;:1,&quot;activo&quot;:0,&quot;estado&quot;:0,&quot;timestampCreate&quot;:&quot;2024-07-21 18:55:43&quot;,&quot;timestampUpdate&quot;:&quot;2024-07-21 18:55:43&quot;,&quot;uidCreate&quot;:1,&quot;uidUpdate&quot;:1,&quot;islocal&quot;:true},&quot;id&quot;:&quot;&quot;}],
    &quot;zoomMapa&quot;:11,
    &quot;latitud&quot;:-7.367233681243338,
    &quot;longitud&quot;:-78.8600850413326,
    &quot;polylines&quot;:&quot;[{\&apos;lat\&apos;:-7.058009,\&apos;lng\&apos;:-79.67596},{\&apos;lat\&apos;:-7.213352,\&apos;lng\&apos;:-79.626547},{\&apos;lat\&apos;:-7.058009,\&apos;lng\&apos;:-79.505759},{\&apos;lat\&apos;:-7.058009,\&apos;lng\&apos;:-79.67596}]&quot;
}&apos;&apos;&apos;

// Convierte el JSON a un mapa
def jsonSlurper = new JsonSlurper()
def jsonObject = jsonSlurper.parseText(originalJson)

// Genera un valor dinámico para el campo &quot;nombre&quot; sin caracteres especiales
jsonObject.nombre = generateRandomName(10)

// Convierte el mapa de vuelta a JSON
def jsonBuilder = new JsonBuilder(jsonObject)
def requestBody = jsonBuilder.toPrettyString()

// Almacena el JSON modificado en una variable de JMeter
vars.put(&quot;requestBody&quot;, requestBody)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gestor de Cabecera HTTP" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Reporte resumen">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
